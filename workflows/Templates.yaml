# Exported from:        http://host.docker.internal:5516/
# Release version:      23.1.0-406.1500
# Date created:         Mon Apr 10 18:32:43 UTC 2023

---
apiVersion: xl-release/v1
kind: Templates
metadata:
  home: Workflows
spec:
- template: AWS Lambda application setup with Digital.ai Deploy
  description: "Easily create an application in Digital.ai Deploy that can be deployed\
    \ to AWS Lambda, including its respective environment and infrastructure setup."
  scheduledStartDate: 2023-03-23T03:30:00Z
  dueDate: 2023-03-23T04:30:00Z
  phases:
  - phase: Setup Infra and Env
    tasks:
    - name: Create Environment
      type: deploy.CreateCI
      owner: admin
      capabilities:
      - remote
      server: Deploy Server
      ciID: "Environments/${environment-name}"
      ciType: udm.Environment
      jsonDescriptor: "{}"
    - name: Specify AWS Connection Parameters
      type: xlrelease.UserInputTask
      description: Please enter the required information below.
      owner: admin
      variables:
      - awscloud-identifier
      - accesskey
      - accessSecret
    - name: Configure AWS Cloud Connection
      type: deploy.CreateCI
      owner: admin
      capabilities:
      - remote
      server: Deploy Server
      ciID: "Infrastructure/${awscloud-identifier}"
      ciType: aws.Cloud
      jsonDescriptor: |-
        {
            "accesskey":"${accesskey}",
            "accessSecret":"${accessSecret}"
        }
      addToEnvironment: true
      envID: "Environments/${environment-name}"
    - name: Check AWS Connection
      type: deploy.ControlTask
      owner: admin
      capabilities:
      - remote
      server: Deploy Server
      ciId: "Infrastructure/${awscloud-identifier}"
      taskName: checkConnection
      numberOfContinueRetrials: 0
      pollingInterval: 10
      numberOfPollingTrials: 0
      displayStepLogs: true
      connectionRetries: 10
    color: '#3d6c9e'
  - phase: Setup Application
    tasks:
    - name: Create Application
      type: deploy.CreateCI
      owner: admin
      capabilities:
      - remote
      server: Deploy Server
      ciID: "Applications/${application-name}"
      ciType: udm.Application
      jsonDescriptor: "{}"
    - name: Create Deployment Package
      type: deploy.CreateCI
      owner: admin
      capabilities:
      - remote
      server: Deploy Server
      ciID: "Applications/${application-name}/${package-name}"
      ciType: udm.DeploymentPackage
      jsonDescriptor: "{}"
    - name: Specify S3Lambda Parameters
      type: xlrelease.UserInputTask
      description: Please enter the required information below.
      owner: admin
      variables:
      - functionName
      - bucketName
      - s3Key
      - region
      - runtime
      - role
      - handler
    - name: Create Sample Lambda Deployment from S3
      type: deploy.CreateCI
      owner: admin
      capabilities:
      - remote
      server: Deploy Server
      ciID: "Applications/${application-name}/${package-name}/sample-lambda"
      ciType: aws.lambda.S3Spec
      jsonDescriptor: |-
        {
            "functionName":"${functionName}",
            "bucketName":"${bucketName}",
            "s3Key":"${s3Key}",
            "region":"${region} ",
            "runtime":"${runtime} ",
            "role":"${role} ",
            "handler":"${handler} "
        }
    - name: Create ManagedApplication
      type: xlrelease.ScriptTask
      owner: admin
      script: |-
        from com.xebialabs.xlrelease.api.v1.views import ManagedApplicationView
        from com.xebialabs.xlrelease.api.v1.views import ConnectionServerView
        from java.util import Date
        from java.text import SimpleDateFormat
        import datetime

        parsedDate = datetime.datetime.now()

        requestBody = ManagedApplicationView()
        requestBody.applicationName = "${application-name}"
        requestBody.managedBy = "${managedBy}"
        requestBody.dateCreated = parsedDate
        requestBody.environmentTag = "${environmentTag}"
        requestBody.applicationReference = "${applicationReference}"
        connectionServer = ConnectionServerView("${connectionServer}", "", "", "")
        requestBody.connectionServer = connectionServer

        res = managedApplicationApi.addManagedApplication(requestBody)
    color: '#3d6c9e'
  tags:
  - app-pipeline-templates
  variables:
  - type: xlrelease.StringVariable
    key: environment-name
    value: aws-env
  - type: xlrelease.StringVariable
    key: awscloud-identifier
    value: aws-cloud
  - type: xlrelease.StringVariable
    key: accessSecret
    value: accessSecret
  - type: xlrelease.StringVariable
    key: accesskey
    value: accesskey
  - type: xlrelease.StringVariable
    key: application-name
    value: aws-app
  - type: xlrelease.StringVariable
    key: package-name
    value: "1.0"
  - type: xlrelease.StringVariable
    key: functionName
    value: functionName
  - type: xlrelease.StringVariable
    key: bucketName
    value: bucketName
  - type: xlrelease.StringVariable
    key: s3Key
    value: s3Key
  - type: xlrelease.StringVariable
    key: region
    value: region
  - type: xlrelease.StringVariable
    key: runtime
    value: runtime
  - type: xlrelease.StringVariable
    key: role
    value: role
  - type: xlrelease.StringVariable
    key: handler
    value: handler
  - type: xlrelease.StringVariable
    key: applicationReference
    value: applicationReference
  - type: xlrelease.StringVariable
    key: connectionServer
    value: connectionServer
  - type: xlrelease.StringVariable
    key: environmentTag
    value: environmentTag
  - type: xlrelease.StringVariable
    key: managedBy
    value: managedBy
  riskProfile: Default risk profile
- template: Azure Application setup with Digital.ai Deploy to create Azure resource
    groups
  description: "Seamless create an application in Digital.ai Deploy that can create\
    \ Azure resource groups, including its respective environment and infrastructure\
    \ setup."
  scheduledStartDate: 2023-03-23T03:30:00Z
  dueDate: 2023-03-23T04:30:00Z
  phases:
  - phase: Setup Infra and Env
    tasks:
    - name: Create Environment
      type: deploy.CreateCI
      owner: admin
      capabilities:
      - remote
      server: Deploy Server
      ciID: "Environments/${environment-name}"
      ciType: udm.Environment
      jsonDescriptor: "{}"
    - name: Specify Azure Connection Parameters
      type: xlrelease.UserInputTask
      description: Please enter the required information below.
      owner: admin
      variables:
      - subscription-id
      - tenant-id
      - client-id
      - client-secret
    - name: Configure Azure Connection
      type: deploy.CreateCI
      owner: admin
      capabilities:
      - remote
      server: Deploy Server
      ciID: "Infrastructure/${azurecloud-identifier}"
      ciType: azure.Cloud
      jsonDescriptor: |-
        {
            "authMethod":"directory-application-and-service-principal",
            "subscriptionId":"${subscription-id}",
            "tenantId":"${tenant-id}",
            "clientId":"${client-id}",
            "clientKey":"${client-secret}"
        }
      addToEnvironment: true
      envID: "Environments/${environment-name}"
    - name: Check Azure Connection
      type: deploy.ControlTask
      owner: admin
      capabilities:
      - remote
      server: Deploy Server
      ciId: "Infrastructure/${azurecloud-identifier}"
      taskName: checkConnection
      numberOfContinueRetrials: 0
      pollingInterval: 10
      numberOfPollingTrials: 0
      displayStepLogs: true
      connectionRetries: 10
    color: '#3d6c9e'
  - phase: Setup Application
    tasks:
    - name: Create Application
      type: deploy.CreateCI
      owner: admin
      capabilities:
      - remote
      server: Deploy Server
      ciID: "Applications/${application-name}"
      ciType: udm.Application
      jsonDescriptor: "{}"
    - name: Create Deployment Package
      type: deploy.CreateCI
      owner: admin
      capabilities:
      - remote
      server: Deploy Server
      ciID: "Applications/${application-name}/${package-name}"
      ciType: udm.DeploymentPackage
      jsonDescriptor: "{}"
    - name: Specify Resource Group Parameters
      type: xlrelease.UserInputTask
      description: Please enter the required information below.
      owner: admin
      variables:
      - resourcegroup-name
      - resourcegroup-location
    - name: Create Sample Resource Group
      type: deploy.CreateCI
      owner: admin
      capabilities:
      - remote
      server: Deploy Server
      ciID: "Applications/${application-name}/${package-name}/sample-resource-group"
      ciType: azure.ResourceGroupSpec
      jsonDescriptor: |-
        {
            "location":"${resourcegroup-location}",
            "resourceGroupName":"${resourcegroup-name}"
        }
    color: '#3d6c9e'
  tags:
  - app-pipeline-templates
  variables:
  - type: xlrelease.StringVariable
    key: environment-name
    value: azure-env
  - type: xlrelease.StringVariable
    key: application-name
    value: azure-app
  - type: xlrelease.StringVariable
    key: package-name
    value: "1.0"
  - type: xlrelease.StringVariable
    key: azurecloud-identifier
    value: azure-cloud
  - type: xlrelease.StringVariable
    key: client-id
    value: client-id
  - type: xlrelease.StringVariable
    key: client-secret
    value: client-secret
  - type: xlrelease.StringVariable
    key: subscription-id
    value: subscription-id
  - type: xlrelease.StringVariable
    key: tenant-id
    value: tenant-id
  - type: xlrelease.StringVariable
    key: resourcegroup-location
    value: East US
  - type: xlrelease.StringVariable
    key: resourcegroup-name
    value: resourcegroup-name
  riskProfile: Default risk profile
- template: GCP Application setup with Digital.ai Deploy for virtual machine instance
  description: "Seamless create an application in Digital.ai Deploy that can set up\
    \ virtual machine instances in GCP, including its respective environment and infrastructure\
    \ configuration."
  scheduledStartDate: 2023-03-31T03:30:00Z
  dueDate: 2023-03-31T04:30:00Z
  phases:
  - phase: Setup Env and Infra
    tasks:
    - name: Create Environment
      type: deploy.CreateCI
      owner: admin
      capabilities:
      - remote
      server: Deploy Server
      ciID: "Environments/${environment_identifier}"
      ciType: udm.Environment
      jsonDescriptor: "{}"
    - name: Specify Google Account Parameters
      type: xlrelease.UserInputTask
      description: Please enter the required information below.
      owner: admin
      variables:
      - gcp_project_id
      - gcp_client_email
      - private_key
    - name: Create Google Account Cloud Infra
      type: deploy.CreateCI
      owner: admin
      capabilities:
      - remote
      server: Deploy Server
      ciID: "Infrastructure/${google_account_cloud_name}"
      ciType: google.AccountCloud
      jsonDescriptor: |-
        {
            "projectId": "${gcp_project_id}",
            "clientEmail": "${gcp_client_email}",
            "privateKey": "${private_key}"
        }
      addToEnvironment: true
      envID: "Environments/${environment_identifier}"
    - name: Check Connection of Google account
      type: deploy.ControlTask
      owner: admin
      capabilities:
      - remote
      server: Deploy Server
      ciId: "Infrastructure/${google_account_cloud_name}"
      taskName: checkConnection
      numberOfContinueRetrials: 0
      pollingInterval: 10
      numberOfPollingTrials: 0
      displayStepLogs: true
      connectionRetries: 10
  - phase: Setup Application
    tasks:
    - name: Create Application
      type: deploy.CreateCI
      owner: admin
      capabilities:
      - remote
      server: Deploy Server
      ciID: "Applications/${application_identifier}"
      ciType: udm.Application
      jsonDescriptor: "{}"
    - name: Create Deployment Package
      type: deploy.CreateCI
      owner: admin
      capabilities:
      - remote
      server: Deploy Server
      ciID: "Applications/${application_identifier}/${application_version}"
      ciType: udm.DeploymentPackage
    - name: Specify Intance Spec Parameters
      type: xlrelease.UserInputTask
      description: Please enter the required information below.
      owner: admin
      variables:
      - zone
      - machine
      - image_project
      - image
      - wait_time_for_create
      - wait_time_for_destroy
    - name: Create Google Instance spec
      type: deploy.CreateCI
      owner: admin
      capabilities:
      - remote
      server: Deploy Server
      ciID: "Applications/${application_identifier}/${application_version}/${instance_spec_name}"
      ciType: googlecloud.compute.InstanceSpec
      jsonDescriptor: |-
        {
            "zone": "${zone}",
            "machine": "${machine}",
            "imageProject": "${image_project}",
            "image": "${image}",
            "waitOnCreate": "${wait_time_for_create}",
            "waitOnDestroy": "${wait_time_for_destroy}"
        }
    color: '#3d6c9e'
  tags:
  - app-pipeline-templates
  variables:
  - type: xlrelease.StringVariable
    key: environment_identifier
    value: gcp_env
  - type: xlrelease.StringVariable
    key: google_account_cloud_name
    value: google_cloud
  - type: xlrelease.StringVariable
    key: gcp_project_id
    value: gcp_project_id
  - type: xlrelease.StringVariable
    key: private_key
    value: gcp_private_key
  - type: xlrelease.StringVariable
    key: application_identifier
    value: gcp_app
  - type: xlrelease.StringVariable
    key: application_version
    value: app_version
  - type: xlrelease.StringVariable
    key: instance_spec_name
    value: gcp_instance_spec_name
  - type: xlrelease.StringVariable
    key: machine
    value: machine
  - type: xlrelease.StringVariable
    key: image_project
    value: image_project
  - type: xlrelease.StringVariable
    key: zone
    value: zone
  - type: xlrelease.StringVariable
    key: image
    value: image
  - type: xlrelease.StringVariable
    key: wait_time_for_create
    value: wait_for_create
  - type: xlrelease.StringVariable
    key: wait_time_for_destroy
    value: wait_time_for_destroy
  - type: xlrelease.StringVariable
    key: gcp_client_email
    value: gcp_client_email
  riskProfile: Default risk profile
- template: Setup ArgoCD application with initial deployment
  description: "Easily create an application in ArgoCD that can be deployed to Kubernetes\
    \ cluster, with initial deployment."
  scheduledStartDate: 2022-12-13T08:00:00Z
  phases:
  - phase: Check if application exists
    tasks:
    - name: Application input
      type: xlrelease.UserInputTask
      description: Input for application information together with the ArgoCD server
      owner: "${release.owner}"
      variables:
      - argoCDApiServer
      - gitRepo
      - path
      - branch
      - clusterUrl
    - name: Check if application exists
      type: argocd.CheckIfApplicationExists
      description: "Check if the application with given input already exists on the\
        \ ArgoCD server. If it exists, the release will fail."
      variableMapping:
        commandResponse: "${applicationExistsResponse}"
        argoServer: "${argoCDApiServer}"
      capabilities:
      - remote
      gitRepo: "${gitRepo}"
      path: "${path}"
      branch: "${branch}"
      clusterUrl: "${clusterUrl}"
    color: '#3d6c9e'
  - phase: Check if namespace exists
    tasks:
    - name: Namespace input
      type: xlrelease.UserInputTask
      description: Input for Kubernetes API server and namespace
      owner: "${release.owner}"
      precondition: |-
        import json

        if releaseVariables["applicationExistsResponse"]["exists"] == "true":
          raise Exception("Application app already exists!")

        result = True
      variables:
      - kubernetesApiServer
      - namespace
    - name: Check if namespace exists
      type: kubernetes.ExistsNamespace
      description: "Checks if '${namespace}' namespace already exists."
      variableMapping:
        server: "${kubernetesApiServer}"
        commandResponse: "${namespaceExistsResponse}"
      capabilities:
      - remote
      namespace: "${namespace}"
    color: '#3d6c9e'
  - phase: Create namespace
    tasks:
    - name: Create namespace
      type: kubernetes.CreateNamespace
      description: "Creates the ${namespace} namespace. If it already exists, this\
        \ task is skipped."
      precondition: |-
        import json

        result = (releaseVariables["namespaceExistsResponse"]["exists"] != "true")
      variableMapping:
        server: "${kubernetesApiServer}"
      capabilities:
      - remote
      namespace: "${namespace}"
    color: '#3d6c9e'
  - phase: Create ArgoCD application
    tasks:
    - name: Application information input
      type: xlrelease.UserInputTask
      description: Application name and ArgoCD project.
      owner: "${release.owner}"
      variables:
      - applicationName
      - projectName
    - name: Create ArgoCD application
      type: argocd.CreateApplication
      description: "Deploys ArgoCD application with given information about application\
        \ name, project, git repo, path and branch."
      variableMapping:
        argoServer: "${argoCDApiServer}"
      capabilities:
      - remote
      appName: "${applicationName}"
      project: "${projectName}"
      url: "${gitRepo}"
      path: "${path}"
      revision: "${branch}"
      server: "${clusterUrl}"
      namespace: "${namespace}"
    color: '#3d6c9e'
  - phase: Get application status
    tasks:
    - name: Get application status
      type: argocd.CheckApplicationStatus
      description: Checks if application is successfully deployed.
      variableMapping:
        argoServer: "${argoCDApiServer}"
      capabilities:
      - remote
      applicationName: "${applicationName}"
    color: '#3d6c9e'
  tags:
  - stepper
  - app-pipeline-templates
  variables:
  - type: xlrelease.MapStringStringVariable
    key: applicationExistsResponse
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.MapStringStringVariable
    key: namespaceExistsResponse
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: gitRepo
    showOnReleaseStart: false
    label: Git Repo
    description: Git repository from where application configuration will be fetched
  - type: xlrelease.StringVariable
    key: path
    showOnReleaseStart: false
    label: Path
    description: Path inside git repository where configuration is located
  - type: xlrelease.StringVariable
    key: branch
    showOnReleaseStart: false
    label: Branch
    description: Git branch
    value: HEAD
  - type: xlrelease.StringVariable
    key: clusterUrl
    showOnReleaseStart: false
    label: Cluster url
    description: Kubernetes cluster URL
    value: https://kubernetes.default.svc
  - type: xlrelease.StringVariable
    key: namespace
    showOnReleaseStart: false
    label: Namespace
    value: default
  - type: xlrelease.StringVariable
    key: applicationName
    showOnReleaseStart: false
    label: Application name
  - type: xlrelease.StringVariable
    key: projectName
    showOnReleaseStart: false
    label: Project name
    value: default
  - type: xlrelease.ReferenceVariable
    key: kubernetesApiServer
    showOnReleaseStart: false
    label: Kubernetes API server
    description: Kubernetes API server where ArgoCD is installed
    referencedType: kubernetes.APIServer
  - type: xlrelease.ReferenceVariable
    key: argoCDApiServer
    showOnReleaseStart: false
    label: ArgoCD API server
    description: ArgoCD API server where application will be deployed
    referencedType: argocd.APIServer
  riskProfile: Default risk profile
- template: Tomcat DataSource Setup on SSH Host with Digital.ai Deploy
  description: "Easily create an application in Digital.ai Deploy that can be used\
    \ to create a DataSource in a Remote Tomcat Server, including its respective environment\
    \ and infrastructure setup."
  scheduledStartDate: 2023-03-23T03:30:00Z
  dueDate: 2023-03-23T04:30:00Z
  phases:
  - phase: Setup Infra and Env
    tasks:
    - name: Create Environment
      type: deploy.CreateCI
      owner: admin
      capabilities:
      - remote
      server: Deploy Server
      ciID: "Environments/${environment-name}"
      ciType: udm.Environment
      jsonDescriptor: "{}"
    - name: Specify Tomcat Host Parameters
      type: xlrelease.UserInputTask
      description: Please enter the required information below.
      owner: admin
      variables:
      - sudo-username
      - os
      - address
      - port
      - ssh-username
      - ssh-privatekey
    - name: Configure Remote Host
      type: deploy.CreateCI
      owner: admin
      capabilities:
      - remote
      server: Deploy Server
      ciID: "Infrastructure/${host-identifier}"
      ciType: overthere.SshHost
      jsonDescriptor: |-
        {
            "stagingDirectoryPath":"",
            "sudoUsername":"${sudo-username}",
            "suUsername":"",
            "suPassword":"",
            "os":"${os}",
            "connectionType":"SUDO",
            "address":"${address}",
            "port":"${port}",
            "username":"${ssh-username}",
            "password":"",
            "privateKeyFile":"${ssh-privatekey}",
            "passphrase":""
        }
      addToEnvironment: true
      envID: "Environments/${environment-name}"
    - name: Check Remote Host Connection
      type: deploy.ControlTask
      owner: admin
      capabilities:
      - remote
      server: Deploy Server
      ciId: "Infrastructure/${host-identifier}"
      taskName: checkConnection
      numberOfContinueRetrials: 0
      pollingInterval: 10
      numberOfPollingTrials: 0
      displayStepLogs: true
      connectionRetries: 10
    - name: Specify Tomcat Server Parameters
      type: xlrelease.UserInputTask
      description: Please enter the required information below.
      owner: admin
      variables:
      - tomcat-home
      - tomcat-start-command
      - tomcat-stop-command
      - tomcat-status-command
      - tomcat-status-exptected-output
    - name: Configure Tomcat Server
      type: deploy.CreateCI
      owner: admin
      capabilities:
      - remote
      server: Deploy Server
      ciID: "Infrastructure/${host-identifier}/tomcat-server"
      ciType: tomcat.Server
      jsonDescriptor: |-
        {
            "home":"${tomcat-home}",
            "startCommand":"${tomcat-start-command}",
            "stopCommand":"${tomcat-stop-command}",
            "statusCommand":"${tomcat-status-command}",
            "statusCommandExpectedOutput":"${tomcat-status-exptected-output}",
            "startWaitTime":"0",
            "stopWaitTime":"0",
            "serverStartupTime":"0",
            "serverShutdownTime":"0",
            "tomcatRunningPort":""
        }
      addToEnvironment: true
      envID: "Environments/${environment-name}"
    - name: Check Tomcat Status
      type: deploy.ControlTask
      capabilities:
      - remote
      server: Deploy Server
      ciId: "Infrastructure/${host-identifier}/tomcat-server"
      taskName: status
      numberOfContinueRetrials: 0
      pollingInterval: 10
      numberOfPollingTrials: 0
      displayStepLogs: true
      connectionRetries: 10
    - name: Configure Tomcat VirtualHost
      type: deploy.CreateCI
      capabilities:
      - remote
      server: Deploy Server
      ciID: "Infrastructure/${host-identifier}/tomcat-server/virtual-host"
      ciType: tomcat.VirtualHost
      jsonDescriptor: "{}"
      addToEnvironment: true
      envID: "Environments/${environment-name}"
  - phase: Setup Application
    tasks:
    - name: Setup Application
      type: deploy.CreateCI
      owner: admin
      capabilities:
      - remote
      server: Deploy Server
      ciID: "Applications/${application-name}"
      ciType: udm.Application
      jsonDescriptor: "{}"
    - name: Create Deployment Package
      type: deploy.CreateCI
      owner: admin
      capabilities:
      - remote
      server: Deploy Server
      ciID: "Applications/${application-name}/1.0"
      ciType: udm.DeploymentPackage
      jsonDescriptor: "{}"
    - name: Specify Tomcat Datasource
      type: xlrelease.UserInputTask
      description: Please enter the required information below.
      owner: admin
      variables:
      - jndi-name
      - datasource-context
      - database-driver-class-name
      - database url
      - db-username
      - db-password
    - name: Create Sample Tomcat DataSourceSpec
      type: deploy.CreateCI
      owner: admin
      capabilities:
      - remote
      server: Deploy Server
      ciID: "Applications/${application-name}/${package-name}/sample-datasource"
      ciType: tomcat.DataSourceSpec
      jsonDescriptor: |-
        {
            "context":"${datasource-context}",
            "jndiName":"${jndi-name}",
            "driverClassName":"${database-driver-class-name}",
            "url":"${database url}",
            "username":"${db-username}",
            "password":"${db-password}"
        }
    color: '#3d6c9e'
  tags:
  - app-pipeline-templates
  variables:
  - type: xlrelease.StringVariable
    key: environment-name
    value: tomcat-env
  - type: xlrelease.StringVariable
    key: host-identifier
    value: tomcat-host
  - type: xlrelease.StringVariable
    key: address
    value: 1.2.3.4
  - type: xlrelease.StringVariable
    key: os
    value: UNIX
  - type: xlrelease.StringVariable
    key: port
    value: "22"
  - type: xlrelease.StringVariable
    key: ssh-privatekey
    value: private-key-path
  - type: xlrelease.StringVariable
    key: ssh-username
    value: ssh-username
  - type: xlrelease.StringVariable
    key: sudo-username
    value: sudo-username
  - type: xlrelease.StringVariable
    key: application-name
    value: tomcat-app
  - type: xlrelease.StringVariable
    key: package-name
    value: "1.0"
  - type: xlrelease.StringVariable
    key: tomcat-home
    value: tomcat-home
  - type: xlrelease.StringVariable
    key: tomcat-start-command
    value: systemctl start tomcat
  - type: xlrelease.StringVariable
    key: tomcat-status-command
    value: systemctl status tomcat
  - type: xlrelease.StringVariable
    key: tomcat-status-exptected-output
    value: active (running)
  - type: xlrelease.StringVariable
    key: tomcat-stop-command
    value: systemctl stop tomcat
  - type: xlrelease.StringVariable
    key: database url
    value: database url
  - type: xlrelease.StringVariable
    key: database-driver-class-name
    value: database-driver-class-name
  - type: xlrelease.StringVariable
    key: datasource-context
    value: datasource-context
  - type: xlrelease.StringVariable
    key: db-password
    value: db-password
  - type: xlrelease.StringVariable
    key: db-username
    value: db-username
  - type: xlrelease.StringVariable
    key: jndi-name
    value: jndi-name
  riskProfile: Default risk profile
- template: Websphere JaasAlias setup with Digital.ai Deploy
  description: "Easily create an application in Digital.ai Deploy that can be used\
    \ to create a JaasAlias in a remote Websphere Server, including its respective\
    \ environment and infrastructure setup."
  scheduledStartDate: 2023-02-14T03:30:00Z
  dueDate: 2023-02-14T04:30:00Z
  phases:
  - phase: Setup Infra and Env
    tasks:
    - name: Create Environment
      type: deploy.CreateCI
      owner: admin
      capabilities:
      - remote
      server: Deploy Server
      ciID: "Environments/${environment-name}"
      ciType: udm.Environment
      jsonDescriptor: "{}"
    - name: Specify WAS Host Parameters
      type: xlrelease.UserInputTask
      description: Please enter the required information below.
      owner: admin
      variables:
      - sudo-username
      - os
      - connection-type
      - address
      - ssh-username
      - ssh-password
    - name: Configure Remote Host
      type: deploy.CreateCI
      owner: admin
      capabilities:
      - remote
      server: Deploy Server
      ciID: "Infrastructure/${host-identifier}"
      ciType: overthere.SshHost
      jsonDescriptor: |-
        {
            "stagingDirectoryPath":"",
            "sudoUsername":"${sudo-username}",
            "suUsername":"",
            "suPassword":"",
            "os":"${os}",
            "connectionType":"${connection-type}",
            "address":"${address}",
            "port":22,
            "username":"${ssh-username}",
            "password":"${ssh-password}",
            "privateKeyFile":"",
            "passphrase":""
        }
    - name: Check Remote Host Connection
      type: deploy.ControlTask
      owner: admin
      capabilities:
      - remote
      server: Deploy Server
      ciId: "Infrastructure/${host-identifier}"
      taskName: checkConnection
      numberOfContinueRetrials: 0
      pollingInterval: 10
      numberOfPollingTrials: 0
      displayStepLogs: true
      connectionRetries: 10
    - name: Specify WAS Deployment Manager Parameters
      type: xlrelease.UserInputTask
      description: Please enter the required information below.
      owner: admin
      variables:
      - was-home
      - was-username
      - was-password
    - name: Configure Websphere Deployment Manager
      type: deploy.CreateCI
      owner: admin
      capabilities:
      - remote
      server: Deploy Server
      ciID: "Infrastructure/${host-identifier}/${cell-name}"
      ciType: was.DeploymentManager
      jsonDescriptor: |-
        {
            "wasHome": "${was-home}",
            "username": "${was-username}",
            "password": "${was-password}",
            "version": "WAS_90"
        }
      addToEnvironment: true
      envID: "Environments/${environment-name}"
    - name: Configure Websphere Node Agent
      type: deploy.CreateCI
      capabilities:
      - remote
      ciID: "Infrastructure/${host-identifier}/${cell-name}/${node-name}"
      ciType: was.NodeAgent
      jsonDescriptor: "{}"
      addToEnvironment: true
      envID: "Environments/${environment-name}"
    - name: Configure Websphere Server
      type: deploy.CreateCI
      capabilities:
      - remote
      ciID: "Infrastructure/${host-identifier}/${cell-name}/${node-name}/${server-name}"
      ciType: was.ManagedServer
      jsonDescriptor: "{}"
      addToEnvironment: true
      envID: "Environments/${environment-name}"
    color: '#3d6c9e'
  - phase: Setup Application
    tasks:
    - name: Create Application
      type: deploy.CreateCI
      owner: admin
      capabilities:
      - remote
      server: Deploy Server
      ciID: "Applications/${application-name}"
      ciType: udm.Application
      jsonDescriptor: "{}"
    - name: Create Deployment Package
      type: deploy.CreateCI
      owner: admin
      capabilities:
      - remote
      server: Deploy Server
      ciID: "Applications/${application-name}/${package-name}"
      ciType: udm.DeploymentPackage
      jsonDescriptor: "{}"
    - name: Specify WAS JaasAliasSpec Parameters
      type: xlrelease.UserInputTask
      description: Please enter the required information below.
      owner: admin
      variables:
      - jaas-password
      - jaas-username
    - name: Create Sample WAS JaasAliasSpec
      type: deploy.CreateCI
      owner: admin
      capabilities:
      - remote
      server: Deploy Server
      ciID: "Applications/${application-name}/${package-name}/sample-jaasalias"
      ciType: was.JaasAliasSpec
      jsonDescriptor: |-
        {
        "username": "${jaas-username}",
        "password": "${jaas-password}"
        }
    color: '#3d6c9e'
  tags:
  - app-pipeline-templates
  variables:
  - type: xlrelease.StringVariable
    key: environment-name
    value: was-env
  - type: xlrelease.StringVariable
    key: host-identifier
    value: was-host
  - type: xlrelease.StringVariable
    key: os
    value: UNIX
  - type: xlrelease.StringVariable
    key: address
    value: 1.2.3.4
  - type: xlrelease.StringVariable
    key: connection-type
    value: SUDO
  - type: xlrelease.StringVariable
    key: ssh-username
    value: ssh-username
  - type: xlrelease.StringVariable
    key: ssh-password
    value: ssh-password
  - type: xlrelease.StringVariable
    key: sudo-username
    value: sudo-username
  - type: xlrelease.StringVariable
    key: application-name
    value: was-application
  - type: xlrelease.StringVariable
    key: package-name
    value: "1.0"
  - type: xlrelease.StringVariable
    key: cell-name
    value: was-cell-1
  - type: xlrelease.StringVariable
    key: was-home
    value: /opt/IBM/WebSphere/AppServer-1/profiles/Dmgr01
  - type: xlrelease.StringVariable
    key: was-password
    value: admin
  - type: xlrelease.StringVariable
    key: was-username
    value: admin
  - type: xlrelease.StringVariable
    key: was-version
    value: WAS_90
  - type: xlrelease.StringVariable
    key: node-name
    value: was-node-1
  - type: xlrelease.StringVariable
    key: server-name
    value: was-server-1
  - type: xlrelease.StringVariable
    key: jaas-password
    value: admin
  - type: xlrelease.StringVariable
    key: jaas-username
    value: admin
  riskProfile: Default risk profile
