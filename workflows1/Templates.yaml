# Exported from:        http://host.docker.internal:5516/
# Release version:      23.1.0-412.1104
# Date created:         Wed Apr 12 16:04:12 UTC 2023

---
apiVersion: xl-release/v1
kind: Templates
metadata:
  home: Workflows
spec:
- template: AWS Lambda application setup with Digital.ai Deploy
  description: "Easily create an application in Digital.ai Deploy that can be deployed\
    \ to AWS Lambda, including its respective environment and infrastructure setup."
  scheduledStartDate: 2023-03-23T03:30:00Z
  dueDate: 2023-03-23T04:30:00Z
  phases:
  - phase: Setup Infra and Env
    tasks:
    - name: Specify Environment Name
      type: xlrelease.UserInputTask
      description: Please enter the required information below.
      owner: admin
      variables:
      - environment-name
    - name: Create Environment
      type: deploy.CreateCI
      owner: admin
      capabilities:
      - remote
      server: Deploy Server
      ciID: "Environments/${environment-name}"
      ciType: udm.Environment
      jsonDescriptor: "{}"
    - name: Specify AWS Connection Parameters
      type: xlrelease.UserInputTask
      description: Please enter the required information below.
      owner: admin
      variables:
      - awscloud-identifier
      - accesskey
      - accessSecret
    - name: Configure AWS Cloud Connection
      type: deploy.CreateCI
      owner: admin
      capabilities:
      - remote
      server: Deploy Server
      ciID: "Infrastructure/${awscloud-identifier}"
      ciType: aws.Cloud
      jsonDescriptor: |-
        {
            "accesskey":"${accesskey}",
            "accessSecret":"${accessSecret}"
        }
      addToEnvironment: true
      envID: "Environments/${environment-name}"
    - name: Check AWS Connection
      type: deploy.ControlTask
      owner: admin
      capabilities:
      - remote
      server: Deploy Server
      ciId: "Infrastructure/${awscloud-identifier}"
      taskName: checkConnection
      numberOfContinueRetrials: 0
      pollingInterval: 10
      numberOfPollingTrials: 0
      displayStepLogs: true
      connectionRetries: 10
    color: '#3d6c9e'
  - phase: Setup Application
    tasks:
    - name: Specify Application Name
      type: xlrelease.UserInputTask
      description: Please enter the required information below.
      owner: admin
      variables:
      - application-name
    - name: Create Application
      type: deploy.CreateCI
      owner: admin
      capabilities:
      - remote
      server: Deploy Server
      ciID: "Applications/${application-name}"
      ciType: udm.Application
      jsonDescriptor: "{}"
    - name: Specify Package Name
      type: xlrelease.UserInputTask
      description: Please enter the required information below.
      owner: admin
      variables:
      - package-name
    - name: Create Deployment Package
      type: deploy.CreateCI
      owner: admin
      capabilities:
      - remote
      server: Deploy Server
      ciID: "Applications/${application-name}/${package-name}"
      ciType: udm.DeploymentPackage
      jsonDescriptor: "{}"
    - name: Specify S3Lambda Parameters
      type: xlrelease.UserInputTask
      description: Please enter the required information below.
      owner: admin
      variables:
      - functionName
      - bucketName
      - s3Key
      - region
      - runtime
      - role
      - handler
    - name: Create Sample Lambda Deployment from S3
      type: deploy.CreateCI
      owner: admin
      capabilities:
      - remote
      server: Deploy Server
      ciID: "Applications/${application-name}/${package-name}/sample-lambda"
      ciType: aws.lambda.S3Spec
      jsonDescriptor: |-
        {
            "functionName":"${functionName}",
            "bucketName":"${bucketName}",
            "s3Key":"${s3Key}",
            "region":"${region} ",
            "runtime":"${runtime} ",
            "role":"${role} ",
            "handler":"${handler} "
        }
    - name: Create ManagedApplication
      type: xlrelease.ScriptTask
      owner: admin
      script: |-
        from com.xebialabs.xlrelease.api.v1.views import ManagedApplicationView
        from com.xebialabs.xlrelease.api.v1.views import ConnectionServerView
        from java.util import Date
        from java.text import SimpleDateFormat
        import datetime

        parsedDate = datetime.datetime.now()

        requestBody = ManagedApplicationView()
        requestBody.applicationName = "${application-name}"
        requestBody.managedBy = "${managedBy}"
        requestBody.dateCreated = parsedDate
        requestBody.environmentTag = "${environmentTag}"
        requestBody.applicationReference = "${applicationReference}"
        connectionServer = ConnectionServerView("${connectionServer}", "", "", "")
        requestBody.connectionServer = connectionServer

        res = managedApplicationApi.addManagedApplication(requestBody)
    color: '#3d6c9e'
  tags:
  - app-pipeline-templates
  variables:
  - type: xlrelease.StringVariable
    key: environment-name
    value: aws-env
  - type: xlrelease.StringVariable
    key: awscloud-identifier
    value: aws-cloud
  - type: xlrelease.StringVariable
    key: accessSecret
    value: accessSecret
  - type: xlrelease.StringVariable
    key: accesskey
    value: accesskey
  - type: xlrelease.StringVariable
    key: application-name
    value: aws-app
  - type: xlrelease.StringVariable
    key: package-name
    value: "1.0"
  - type: xlrelease.StringVariable
    key: functionName
    value: functionName
  - type: xlrelease.StringVariable
    key: bucketName
    value: bucketName
  - type: xlrelease.StringVariable
    key: s3Key
    value: s3Key
  - type: xlrelease.StringVariable
    key: region
    value: region
  - type: xlrelease.StringVariable
    key: runtime
    value: runtime
  - type: xlrelease.StringVariable
    key: role
    value: role
  - type: xlrelease.StringVariable
    key: handler
    value: handler
  - type: xlrelease.StringVariable
    key: applicationReference
    value: applicationReference
  - type: xlrelease.StringVariable
    key: connectionServer
    value: connectionServer
  - type: xlrelease.StringVariable
    key: environmentTag
    value: environmentTag
  - type: xlrelease.StringVariable
    key: managedBy
    value: managedBy
  scriptUsername: admin
  scriptUserPassword: !value "xlrelease_Release_AWS_Lambda_application_setup_with_Digital_ai_Deploy_scriptUserPassword"
  riskProfile: Default risk profile
- template: Azure Application setup with Digital.ai Deploy to create Azure resource
    groups
  description: "Seamless create an application in Digital.ai Deploy that can create\
    \ Azure resource groups, including its respective environment and infrastructure\
    \ setup."
  scheduledStartDate: 2023-03-23T03:30:00Z
  dueDate: 2023-03-23T04:30:00Z
  phases:
  - phase: Setup Infra and Env
    tasks:
    - name: Specify Environment Name
      type: xlrelease.UserInputTask
      description: Please enter the required information below.
      owner: admin
      variables:
      - environment-name
    - name: Create Environment
      type: deploy.CreateCI
      owner: admin
      capabilities:
      - remote
      server: Deploy Server
      ciID: "Environments/${environment-name}"
      ciType: udm.Environment
      jsonDescriptor: "{}"
    - name: Specify Azure Connection Parameters
      type: xlrelease.UserInputTask
      description: Please enter the required information below.
      owner: admin
      variables:
      - azurecloud-identifier
      - subscription-id
      - tenant-id
      - client-id
      - client-secret
    - name: Configure Azure Connection
      type: deploy.CreateCI
      owner: admin
      capabilities:
      - remote
      server: Deploy Server
      ciID: "Infrastructure/${azurecloud-identifier}"
      ciType: azure.Cloud
      jsonDescriptor: |-
        {
            "authMethod":"directory-application-and-service-principal",
            "subscriptionId":"${subscription-id}",
            "tenantId":"${tenant-id}",
            "clientId":"${client-id}",
            "clientKey":"${client-secret}"
        }
      addToEnvironment: true
      envID: "Environments/${environment-name}"
    - name: Check Azure Connection
      type: deploy.ControlTask
      owner: admin
      capabilities:
      - remote
      server: Deploy Server
      ciId: "Infrastructure/${azurecloud-identifier}"
      taskName: checkConnection
      numberOfContinueRetrials: 0
      pollingInterval: 10
      numberOfPollingTrials: 0
      displayStepLogs: true
      connectionRetries: 10
    color: '#3d6c9e'
  - phase: Setup Application
    tasks:
    - name: Specify Application Name
      type: xlrelease.UserInputTask
      description: Please enter the required information below.
      owner: admin
      variables:
      - application-name
    - name: Create Application
      type: deploy.CreateCI
      owner: admin
      capabilities:
      - remote
      server: Deploy Server
      ciID: "Applications/${application-name}"
      ciType: udm.Application
      jsonDescriptor: "{}"
    - name: Specify Package Name
      type: xlrelease.UserInputTask
      description: Please enter the required information below.
      owner: admin
      variables:
      - package-name
    - name: Create Deployment Package
      type: deploy.CreateCI
      owner: admin
      capabilities:
      - remote
      server: Deploy Server
      ciID: "Applications/${application-name}/${package-name}"
      ciType: udm.DeploymentPackage
      jsonDescriptor: "{}"
    - name: Specify Resource Group Parameters
      type: xlrelease.UserInputTask
      description: Please enter the required information below.
      owner: admin
      variables:
      - resourcegroup-name
      - resourcegroup-location
    - name: Create Sample Resource Group
      type: deploy.CreateCI
      owner: admin
      capabilities:
      - remote
      server: Deploy Server
      ciID: "Applications/${application-name}/${package-name}/sample-resource-group"
      ciType: azure.ResourceGroupSpec
      jsonDescriptor: |-
        {
            "location":"${resourcegroup-location}",
            "resourceGroupName":"${resourcegroup-name}"
        }
    color: '#3d6c9e'
  tags:
  - app-pipeline-templates
  variables:
  - type: xlrelease.StringVariable
    key: environment-name
    value: azure-env
  - type: xlrelease.StringVariable
    key: application-name
    value: azure-app
  - type: xlrelease.StringVariable
    key: package-name
    value: "1.0"
  - type: xlrelease.StringVariable
    key: azurecloud-identifier
    value: azure-cloud
  - type: xlrelease.StringVariable
    key: client-id
    value: client-id
  - type: xlrelease.StringVariable
    key: client-secret
    value: client-secret
  - type: xlrelease.StringVariable
    key: subscription-id
    value: subscription-id
  - type: xlrelease.StringVariable
    key: tenant-id
    value: tenant-id
  - type: xlrelease.StringVariable
    key: resourcegroup-location
    value: East US
  - type: xlrelease.StringVariable
    key: resourcegroup-name
    value: resourcegroup-name
  riskProfile: Default risk profile
- template: GCP Application setup with Digital.ai Deploy for virtual machine instance
  description: "Seamless create an application in Digital.ai Deploy that can set up\
    \ virtual machine instances in GCP, including its respective environment and infrastructure\
    \ configuration."
  scheduledStartDate: 2023-03-31T03:30:00Z
  dueDate: 2023-03-31T04:30:00Z
  phases:
  - phase: Setup Env and Infra
    tasks:
    - name: Specify Environment Name
      type: xlrelease.UserInputTask
      description: Please enter the required information below.
      owner: admin
      variables:
      - environment_identifier
    - name: Create Environment
      type: deploy.CreateCI
      owner: admin
      capabilities:
      - remote
      server: Deploy Server
      ciID: "Environments/${environment_identifier}"
      ciType: udm.Environment
      jsonDescriptor: "{}"
    - name: Specify Google Account Parameters
      type: xlrelease.UserInputTask
      description: Please enter the required information below.
      owner: admin
      variables:
      - google_account_cloud_name
      - gcp_project_id
      - gcp_client_email
      - private_key
    - name: Create Google Account Cloud Infra
      type: deploy.CreateCI
      owner: admin
      capabilities:
      - remote
      server: Deploy Server
      ciID: "Infrastructure/${google_account_cloud_name}"
      ciType: google.AccountCloud
      jsonDescriptor: |-
        {
            "projectId": "${gcp_project_id}",
            "clientEmail": "${gcp_client_email}",
            "privateKey": "${private_key}"
        }
      addToEnvironment: true
      envID: "Environments/${environment_identifier}"
    - name: Check Connection of Google account
      type: deploy.ControlTask
      owner: admin
      capabilities:
      - remote
      server: Deploy Server
      ciId: "Infrastructure/${google_account_cloud_name}"
      taskName: checkConnection
      numberOfContinueRetrials: 0
      pollingInterval: 10
      numberOfPollingTrials: 0
      displayStepLogs: true
      connectionRetries: 10
  - phase: Setup Application
    tasks:
    - name: Specify Application Name
      type: xlrelease.UserInputTask
      description: Please enter the required information below.
      owner: admin
      variables:
      - application_identifier
    - name: Create Application
      type: deploy.CreateCI
      owner: admin
      capabilities:
      - remote
      server: Deploy Server
      ciID: "Applications/${application_identifier}"
      ciType: udm.Application
      jsonDescriptor: "{}"
    - name: Specify Package Name
      type: xlrelease.UserInputTask
      description: Please enter the required information below.
      owner: admin
      variables:
      - application_version
    - name: Create Deployment Package
      type: deploy.CreateCI
      owner: admin
      capabilities:
      - remote
      server: Deploy Server
      ciID: "Applications/${application_identifier}/${application_version}"
      ciType: udm.DeploymentPackage
    - name: Specify Intance Spec Parameters
      type: xlrelease.UserInputTask
      description: Please enter the required information below.
      owner: admin
      variables:
      - zone
      - machine
      - image_project
      - image
      - wait_time_for_create
      - wait_time_for_destroy
    - name: Create Google Instance spec
      type: deploy.CreateCI
      owner: admin
      capabilities:
      - remote
      server: Deploy Server
      ciID: "Applications/${application_identifier}/${application_version}/${instance_spec_name}"
      ciType: googlecloud.compute.InstanceSpec
      jsonDescriptor: |-
        {
            "zone": "${zone}",
            "machine": "${machine}",
            "imageProject": "${image_project}",
            "image": "${image}",
            "waitOnCreate": "${wait_time_for_create}",
            "waitOnDestroy": "${wait_time_for_destroy}"
        }
    color: '#3d6c9e'
  tags:
  - app-pipeline-templates
  variables:
  - type: xlrelease.StringVariable
    key: environment_identifier
    value: gcp_env
  - type: xlrelease.StringVariable
    key: google_account_cloud_name
    value: google_cloud
  - type: xlrelease.StringVariable
    key: gcp_project_id
    value: gcp_project_id
  - type: xlrelease.StringVariable
    key: private_key
    value: gcp_private_key
  - type: xlrelease.StringVariable
    key: application_identifier
    value: gcp_app
  - type: xlrelease.StringVariable
    key: application_version
    value: app_version
  - type: xlrelease.StringVariable
    key: instance_spec_name
    value: gcp_instance_spec_name
  - type: xlrelease.StringVariable
    key: machine
    value: machine
  - type: xlrelease.StringVariable
    key: image_project
    value: image_project
  - type: xlrelease.StringVariable
    key: zone
    value: zone
  - type: xlrelease.StringVariable
    key: image
    value: image
  - type: xlrelease.StringVariable
    key: wait_time_for_create
    value: wait_for_create
  - type: xlrelease.StringVariable
    key: wait_time_for_destroy
    value: wait_time_for_destroy
  - type: xlrelease.StringVariable
    key: gcp_client_email
    value: gcp_client_email
  riskProfile: Default risk profile
- template: Install Argo Rollouts
  description: Install Argo Rollouts to Kubernetes cluster.
  scheduledStartDate: 2022-12-07T08:00:00Z
  phases:
  - phase: Check if Argo Rollouts is already installed
    tasks:
    - name: Check if remote runner exists
      type: xlrelease.ScriptTask
      description: "Task checks if there is a remote runner enabled. Also, the enabled\
        \ remote runner needs to have \"remote\" capability."
      script: |-
        def check_runners(runners):
          for runner in runners:
            if runner["enabled"] and "remote" in runner["capabilities"]:
              return True
          return False

        runners = configurationApi.searchByTypeAndTitle("xlrelease.JobRunner", "")

        if not check_runners(runners):
          raise Exception("There is no job runner with 'remote' capability enabled")
    - name: Input for Argo Rollouts installation
      type: xlrelease.UserInputTask
      description: Input for Kubernetes API server URL and Kubernetes namespace where
        ArgoCD will be installed.Please enter the required information below.
      owner: "${release.owner}"
      variables:
      - kubernetesApiServer
      - namespace
    - name: Check if Argo Rollouts namespace exists
      type: kubernetes.ExistsNamespace
      description: "Checks if '${namespace}' namespace already exists. If it exists,\
        \ there will be a check performed if ArgoCD services already exist."
      variableMapping:
        server: "${kubernetesApiServer}"
        commandResponse: "${namespaceExistsResponse}"
      capabilities:
      - remote
      namespace: "${namespace}"
    - name: List all services in Argo Rollouts namespace
      type: kubernetes.ListServices
      description: |-
        If '${namespace}' namespace exists, this task will be skipped.
        Task lists all services and after that checks if there are any ArgoCD services.
      precondition: |-
        if releaseVariables['namespaceExistsResponse']['exists'] != 'false':
          result = True
        else:
          result = False
      variableMapping:
        server: "${kubernetesApiServer}"
        commandResponse: "${allServicesResponse}"
      capabilities:
      - remote
      namespace: "${namespace}"
    - name: Validate that Argo Rollouts services don't exist
      type: xlrelease.ScriptTask
      description: |-
        If '${namespace}' namespace exists, this task will be skipped.
        Task checks if there are any Argo Rollouts services in '${namespace}' namespace exist. If there are some, it means that Argo Rollouts is already installed and the release fails.
      precondition: |-
        if releaseVariables['namespaceExistsResponse']['exists'] == 'false':
          result = False
        else:
          result = True
      script: |-
        import json

        services = json.loads(releaseVariables['allServicesResponse']['services'])
        for service in services:
          if service.get('metadata', {}).get('name', '') == "argo-rollouts":
            raise Exception('Argo Rollouts is already installed in namespace ${namespace}')
    color: '#3d6c9e'
  - phase: Install Argo Rollouts
    tasks:
    - name: Create argo-rollouts namespace
      type: kubernetes.CreateNamespace
      description: "Creates '${namespace}' namespace."
      precondition: |-
        import json

        def get_result_from_response(resp):
            if resp.has_key('exists') and resp['exists'] != 'false':
              return False
            else:
              return True

        if releaseVariables.has_key('argoNamespaceExists'):
          result = get_result_from_response(releaseVariables['argoNamespaceExists'])
        else:
          result = False
      variableMapping:
        server: "${kubernetesApiServer}"
      capabilities:
      - remote
      namespace: "${namespace}"
    - name: Apply Argo Rollouts installation on cluster
      type: kubernetes.Apply
      description: "Applies Argo Rollouts installation YAML on '${namespace}' namespace."
      variableMapping:
        server: "${kubernetesApiServer}"
      capabilities:
      - remote
      yamlLocation: https://github.com/argoproj/argo-rollouts/releases/latest/download/install.yaml
      namespace: argo-rollouts
    - name: Check status of pods in argo-rollouts namespace
      type: kubernetes.CheckPodStatus
      description: Performs check if all Argo Rollouts services are running successfully.
      variableMapping:
        server: "${kubernetesApiServer}"
        commandResponse: "${checkService}"
      capabilities:
      - remote
      namespace: "${namespace}"
      labelSelector: app.kubernetes.io/name=argo-rollouts
    color: '#3d6c9e'
  - phase: Create Argo Rollouts CI
    tasks:
    - name: Input for Argo Rollouts CI
      type: xlrelease.UserInputTask
      description: Please enter the required information below.
      owner: "${release.owner}"
      precondition: |-
        if releaseVariables.has_key('checkService'):
          checkService = releaseVariables['checkService']
          if checkService.has_key('allRunning') and checkService['allRunning'] == 'true':
            result = True
          else:
              raise Exception("Argo Rollouts services not running!")
      variables:
      - apiToken
      - usernameRollouts
      - argoRolloutsHost
    - name: Create Argo Rollouts CI
      type: xlrelease.ScriptTask
      script: '# todo implement when argo rollouts plugin is done'
    color: '#3d6c9e'
  tags:
  - app-pipeline-templates
  - stepper
  variables:
  - type: xlrelease.StringVariable
    key: namespace
    showOnReleaseStart: false
    label: Namespace
    description: Kubernetes namespace where Argo Rollouts will be installed
    value: argo-rollouts
  - type: xlrelease.ReferenceVariable
    key: kubernetesApiServer
    showOnReleaseStart: false
    label: Kubernetes API server
    description: Kubernetes API server where Argo Rollouts will be installed
    referencedType: kubernetes.APIServer
  - type: xlrelease.MapStringStringVariable
    key: namespaceExistsResponse
    requiresValue: false
    showOnReleaseStart: false
    label: namespaceExistsResponse
  - type: xlrelease.StringVariable
    key: argoRolloutsHost
    requiresValue: false
    showOnReleaseStart: false
    label: Argo Rollouts host
  - type: xlrelease.StringVariable
    key: usernameRollouts
    requiresValue: false
    showOnReleaseStart: false
    label: Username
    value: admin
  - type: xlrelease.StringVariable
    key: apiToken
    requiresValue: false
    showOnReleaseStart: false
    label: API token
  - type: xlrelease.MapStringStringVariable
    key: checkService
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.MapStringStringVariable
    key: allServicesResponse
    requiresValue: false
    showOnReleaseStart: false
  scriptUsername: admin
  riskProfile: Default risk profile
- template: Install ArgoCD
  description: Install ArgoCD on Kubernetes cluster for deploying an Application
  scheduledStartDate: 2022-12-07T08:00:00Z
  phases:
  - phase: Check if ArgoCD is already installed
    tasks:
    - name: Check if remote runner exists
      type: xlrelease.ScriptTask
      description: "Task checks if there is a remote runner enabled. Also, the enabled\
        \ remote runner needs to have \"remote\" capability."
      script: |-
        def check_runners(runners):
          for runner in runners:
            if runner["enabled"] and "remote" in runner["capabilities"]:
              return True
          return False

        runners = configurationApi.searchByTypeAndTitle("xlrelease.JobRunner", "")

        if not check_runners(runners):
          raise Exception("There is no job runner with 'remote' capability enabled")
    - name: Input for ArgoCD installation
      type: xlrelease.UserInputTask
      description: Input for Kubernetes API server URL and Kubernetes namespace where
        ArgoCD will be installed.
      owner: "${release.owner}"
      variables:
      - kubernetesApiServer
      - namespace
    - name: Check if ArgoCD namespace exists
      type: kubernetes.ExistsNamespace
      description: "Checks if '${namespace}' namespace already exists. If it exists,\
        \ there will be a check performed if ArgoCD services already exist."
      variableMapping:
        server: "${kubernetesApiServer}"
        commandResponse: "${argoCDNamespaceExistsResponse}"
      capabilities:
      - remote
      namespace: "${namespace}"
    - name: List all services in ArgoCD namespace
      type: kubernetes.ListServices
      description: |-
        If '${namespace}' namespace exists, this task will be skipped.
        Task lists all services and after that checks if there are any ArgoCD services.
      precondition: |-
        if releaseVariables['argoCDNamespaceExistsResponse']['exists'] != 'false':
          result = True
        else:
          result = False
      variableMapping:
        server: "${kubernetesApiServer}"
        commandResponse: "${allServicesResponse}"
      capabilities:
      - remote
      namespace: "${namespace}"
    - name: Validate that ArgoCD services don't exist
      type: xlrelease.ScriptTask
      description: |-
        If '${namespace}' namespace exists, this task will be skipped.
        Task checks if there are any ArgoCD services in '${namespace}' namespace exist. If there are some, it means that ArgoCD is already installed and the release fails.
      precondition: |-
        if releaseVariables['argoCDNamespaceExistsResponse']['exists'] == 'false':
          result = False
        else:
          result = True
      script: |-
        import json

        services = json.loads(releaseVariables['allServicesResponse']['services'])
        for service in services:
          if service.get('metadata', {}).get('name', '') == "argocd-server":
            raise Exception('ArgoCD is already installed in namespace ${namespace}')
    color: '#3d6c9e'
  - phase: Install ArgoCD
    tasks:
    - name: Create ArgoCD namespace
      type: kubernetes.CreateNamespace
      description: "Creates '${namespace}' namespace."
      precondition: |-
        if releaseVariables['argoCDNamespaceExistsResponse']['exists'] != 'false':
          result = False
        else:
          result = True
      variableMapping:
        server: "${kubernetesApiServer}"
      capabilities:
      - remote
      namespace: "${namespace}"
    - name: Apply ArgoCD installation on cluster
      type: kubernetes.Apply
      description: "Applies ArgoCD installation YAML on '${namespace}' namespace."
      variableMapping:
        server: "${kubernetesApiServer}"
      capabilities:
      - remote
      yamlLocation: https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
      namespace: "${namespace}"
    - name: Check status of pods in ArgoCD namespace
      type: kubernetes.CheckPodStatus
      description: Performs check if all ArgoCD services are running successfully.
      variableMapping:
        server: "${kubernetesApiServer}"
        commandResponse: "${checkServiceResponse}"
      capabilities:
      - remote
      namespace: "${namespace}"
      labelSelector: app.kubernetes.io/name=argocd-server
    color: '#3d6c9e'
  - phase: Create CIs for live deployment
    tasks:
    - name: Fetch secret
      type: kubernetes.GetSecret
      description: Fetches initial ArgoCD dashboard admin password.
      precondition: |-
        if releaseVariables['checkServiceResponse']['allRunning'] == 'true':
          result = True
        else:
            raise Exception("ArgoCD services not running!")
      variableMapping:
        secureResponse: "${argoCDSecret}"
        server: "${kubernetesApiServer}"
      capabilities:
      - remote
      namespace: "${namespace}"
      secretName: argocd-initial-admin-secret
      dataField: password
    - name: Input for ArgoCD CI
      type: xlrelease.UserInputTask
      description: Input for ArgoCD API server title and host URL for the CI that
        will be created.
      owner: "${release.owner}"
      variables:
      - argoCDServerTitle
      - argoCDHost
    - name: Create ArgoCD live deployment CIs
      type: xlrelease.ScriptTask
      description: |-
        Creates ArgoCD API server CI with given title and host.
        Also, authentication is set to basic with admin username and initial password.
        For live deployment, webhook endpoint and event source are created.
      script: |-
        import base64
        import uuid

        from com.xebialabs.deployit.plugin.api.reflect import Type
        from com.xebialabs.deployit.util import PasswordEncrypter

        server = Type.valueOf("argocd.APIServer").getDescriptor().newInstance("argocd-server")

        server.setProperty("folderId", release.findFolderId())
        server.setProperty("title", releaseVariables['argoCDServerTitle'])
        server.setProperty("url", releaseVariables['argoCDHost'])
        server.setProperty("authenticationMethod", "Basic")
        server.setProperty("username", "admin")

        # Set password
        encrypted = releaseVariables["argoCDSecret"]
        enc = PasswordEncrypter.getInstance()
        decrypted = enc.ensureDecrypted(encrypted)
        password = base64.b64decode(decrypted + b'==')
        server.setProperty("password", password)

        # Set default values
        server.setProperty("cardinality", 1)
        server.setProperty("proxyHost", "")
        server.setProperty("proxyPort", "")
        server.setProperty("proxyUsername", "")
        server.setProperty("proxyDomain", "")

        # Add ArgoCD API server
        configurationApi.addConfiguration(server)

        # Add webhook endpoint
        authentication = Type.valueOf("events.NoAuthentication").getDescriptor().newInstance("no-authentication")

        endpoint = Type.valueOf("events.PostWebhookEndpoint").getDescriptor().newInstance("post-webhook-endpoint")
        endpoint.setProperty("folderId", release.findFolderId())
        endpoint.setProperty("title", releaseVariables['argoCDServerTitle'])
        endpoint.setProperty("path", "path-" + str(uuid.uuid4()))
        endpoint.setProperty("authentication", authentication)

        configurationApi.addConfiguration(endpoint)

        # Add event source
        eventSource = Type.valueOf("argocd.StatusWebhookEventSource").getDescriptor().newInstance("status-event-webhook")
        eventSource.setProperty("folderId", release.findFolderId())
        eventSource.setProperty("title", releaseVariables['argoCDServerTitle'])
        eventSource.setProperty("eventSource", endpoint)
        eventSource.setProperty("sourceServer", server)
        eventSource.setProperty("filteredFolders", ["default"])

        configurationApi.addConfiguration(eventSource)
    color: '#3d6c9e'
  tags:
  - stepper
  - app-pipeline-templates
  variables:
  - type: xlrelease.StringVariable
    key: namespace
    showOnReleaseStart: false
    label: Namespace
    description: Kubernetes namespace where ArgoCD will be installed
    value: argocd
  - type: xlrelease.ReferenceVariable
    key: kubernetesApiServer
    showOnReleaseStart: false
    label: Kubernetes API server
    description: Kubernetes API server where ArgoCD will be installed
    referencedType: kubernetes.APIServer
  - type: xlrelease.MapStringStringVariable
    key: allServicesResponse
    requiresValue: false
    showOnReleaseStart: false
    value:
      services: "[]"
  - type: xlrelease.MapStringStringVariable
    key: argoCDNamespaceExistsResponse
    requiresValue: false
    showOnReleaseStart: false
    value:
      exists: "false"
  - type: xlrelease.MapStringStringVariable
    key: checkServiceResponse
    requiresValue: false
    showOnReleaseStart: false
    value:
      allRunning: "false"
  - type: xlrelease.StringVariable
    key: argoCDHost
    showOnReleaseStart: false
    label: ArgoCD API Server Host
    description: URL to the base of the API Server
  - type: xlrelease.StringVariable
    key: argoCDServerTitle
    showOnReleaseStart: false
    label: ArgoCD API Server Title
  - type: xlrelease.PasswordStringVariable
    key: argoCDSecret
    requiresValue: false
    showOnReleaseStart: false
  scriptUsername: admin
  riskProfile: Default risk profile
- template: Setup ArgoCD application with initial deployment
  description: "Easily create an application in ArgoCD that can be deployed to Kubernetes\
    \ cluster, with initial deployment."
  scheduledStartDate: 2022-12-13T08:00:00Z
  dueDate: 2022-12-13T09:00:00Z
  phases:
  - phase: Check if application exists
    tasks:
    - name: Application input
      type: xlrelease.UserInputTask
      description: Input for application information together with the ArgoCD server
      owner: "${release.owner}"
      variables:
      - argoCDApiServer
      - gitRepo
      - path
      - branch
      - clusterUrl
    - name: Check if application exists
      type: argocd.CheckIfApplicationExists
      description: "Check if the application with given input already exists on the\
        \ ArgoCD server. If it exists, the release will fail."
      variableMapping:
        commandResponse: "${applicationExistsResponse}"
        argoServer: "${argoCDApiServer}"
      capabilities:
      - remote
      gitRepo: "${gitRepo}"
      path: "${path}"
      branch: "${branch}"
      clusterUrl: "${clusterUrl}"
    color: '#3d6c9e'
  - phase: Check if namespace exists
    tasks:
    - name: Namespace input
      type: xlrelease.UserInputTask
      description: Input for Kubernetes API server and namespace
      owner: "${release.owner}"
      precondition: |-
        import json

        if releaseVariables["applicationExistsResponse"]["exists"] == "true":
          raise Exception("Application app already exists!")

        result = True
      variables:
      - kubernetesApiServer
      - namespace
    - name: Check if namespace exists
      type: kubernetes.ExistsNamespace
      description: "Checks if '${namespace}' namespace already exists."
      variableMapping:
        server: "${kubernetesApiServer}"
        commandResponse: "${namespaceExistsResponse}"
      capabilities:
      - remote
      namespace: "${namespace}"
    color: '#3d6c9e'
  - phase: Create namespace
    tasks:
    - name: Create namespace
      type: kubernetes.CreateNamespace
      description: "Creates the ${namespace} namespace. If it already exists, this\
        \ task is skipped."
      precondition: |-
        import json

        result = (releaseVariables["namespaceExistsResponse"]["exists"] != "true")
      variableMapping:
        server: "${kubernetesApiServer}"
      capabilities:
      - remote
      namespace: "${namespace}"
    color: '#3d6c9e'
  - phase: Create ArgoCD application
    tasks:
    - name: Application information input
      type: xlrelease.UserInputTask
      description: Application name and ArgoCD project.
      owner: "${release.owner}"
      variables:
      - applicationName
      - projectName
    - name: Create ArgoCD application
      type: argocd.CreateApplication
      description: "Deploys ArgoCD application with given information about application\
        \ name, project, git repo, path and branch."
      variableMapping:
        argoServer: "${argoCDApiServer}"
      capabilities:
      - remote
      appName: "${applicationName}"
      project: "${projectName}"
      url: "${gitRepo}"
      path: "${path}"
      revision: "${branch}"
      server: "${clusterUrl}"
      namespace: "${namespace}"
    color: '#3d6c9e'
  - phase: Get application status
    tasks:
    - name: Get application status
      type: argocd.CheckApplicationStatus
      description: Checks if application is successfully deployed.
      variableMapping:
        argoServer: "${argoCDApiServer}"
      capabilities:
      - remote
      applicationName: "${applicationName}"
    - name: Create Managed App
      type: xlrelease.ScriptTask
      script: |-
        from com.xebialabs.xlrelease.api.v1.views import ManagedApplicationView
        from com.xebialabs.xlrelease.api.v1.views import ConnectionServerView
        from java.util import Date
        from java.text import SimpleDateFormat

        dateCreated = "${dateCreated}"
        dateFormat = SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssXXX")
        parsedDate = dateFormat.parse(dateCreated)

        requestBody = ManagedApplicationView()
        requestBody.applicationName = "${applicationName}"
        requestBody.managedBy = "${managedBy}"
        requestBody.dateCreated = parsedDate
        requestBody.environmentTag = "${environmentTag}"
        requestBody.applicationReference = "${applicationReference}"
        connectionServer = ConnectionServerView("${connectionServer}", "", "", "")
        requestBody.connectionServer = connectionServer

        res = managedApplicationApi.addManagedApplication(requestBody)
    color: '#3d6c9e'
  tags:
  - stepper
  - app-pipeline-templates
  variables:
  - type: xlrelease.MapStringStringVariable
    key: applicationExistsResponse
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.MapStringStringVariable
    key: namespaceExistsResponse
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: gitRepo
    showOnReleaseStart: false
    label: Git Repo
    description: Git repository from where application configuration will be fetched
  - type: xlrelease.StringVariable
    key: path
    showOnReleaseStart: false
    label: Path
    description: Path inside git repository where configuration is located
  - type: xlrelease.StringVariable
    key: branch
    showOnReleaseStart: false
    label: Branch
    description: Git branch
    value: HEAD
  - type: xlrelease.StringVariable
    key: clusterUrl
    showOnReleaseStart: false
    label: Cluster url
    description: Kubernetes cluster URL
    value: https://kubernetes.default.svc
  - type: xlrelease.StringVariable
    key: namespace
    showOnReleaseStart: false
    label: Namespace
    value: default
  - type: xlrelease.StringVariable
    key: applicationName
    showOnReleaseStart: false
    label: Application name
  - type: xlrelease.StringVariable
    key: projectName
    showOnReleaseStart: false
    label: Project name
    value: default
  - type: xlrelease.ReferenceVariable
    key: kubernetesApiServer
    showOnReleaseStart: false
    label: Kubernetes API server
    description: Kubernetes API server where ArgoCD is installed
    referencedType: kubernetes.APIServer
  - type: xlrelease.ReferenceVariable
    key: argoCDApiServer
    showOnReleaseStart: false
    label: ArgoCD API server
    description: ArgoCD API server where application will be deployed
    referencedType: argocd.APIServer
  - type: xlrelease.StringVariable
    key: applicationReference
  - type: xlrelease.StringVariable
    key: connectionServer
  - type: xlrelease.StringVariable
    key: dateCreated
  - type: xlrelease.StringVariable
    key: environmentTag
  - type: xlrelease.StringVariable
    key: managedBy
  riskProfile: Default risk profile
- template: Tomcat DataSource Setup on SSH Host with Digital.ai Deploy
  description: "Easily create an application in Digital.ai Deploy that can be used\
    \ to create a DataSource in a Remote Tomcat Server, including its respective environment\
    \ and infrastructure setup."
  scheduledStartDate: 2023-03-23T03:30:00Z
  dueDate: 2023-03-23T04:30:00Z
  phases:
  - phase: Setup Infra and Env
    tasks:
    - name: Specify Environment Name
      type: xlrelease.UserInputTask
      description: Please enter the required information below.
      owner: admin
      variables:
      - environment-name
    - name: Create Environment
      type: deploy.CreateCI
      owner: admin
      capabilities:
      - remote
      server: Deploy Server
      ciID: "Environments/${environment-name}"
      ciType: udm.Environment
      jsonDescriptor: "{}"
    - name: Specify Tomcat Host Parameters
      type: xlrelease.UserInputTask
      description: Please enter the required information below.
      owner: admin
      variables:
      - host-identifier
      - sudo-username
      - os
      - address
      - port
      - ssh-username
      - ssh-privatekey
    - name: Configure Remote Host
      type: deploy.CreateCI
      owner: admin
      capabilities:
      - remote
      server: Deploy Server
      ciID: "Infrastructure/${host-identifier}"
      ciType: overthere.SshHost
      jsonDescriptor: |-
        {
            "stagingDirectoryPath":"",
            "sudoUsername":"${sudo-username}",
            "suUsername":"",
            "suPassword":"",
            "os":"${os}",
            "connectionType":"SUDO",
            "address":"${address}",
            "port":"${port}",
            "username":"${ssh-username}",
            "password":"",
            "privateKeyFile":"${ssh-privatekey}",
            "passphrase":""
        }
      addToEnvironment: true
      envID: "Environments/${environment-name}"
    - name: Check Remote Host Connection
      type: deploy.ControlTask
      owner: admin
      capabilities:
      - remote
      server: Deploy Server
      ciId: "Infrastructure/${host-identifier}"
      taskName: checkConnection
      numberOfContinueRetrials: 0
      pollingInterval: 10
      numberOfPollingTrials: 0
      displayStepLogs: true
      connectionRetries: 10
    - name: Specify Tomcat Server Parameters
      type: xlrelease.UserInputTask
      description: Please enter the required information below.
      owner: admin
      variables:
      - server-name
      - tomcat-home
      - tomcat-start-command
      - tomcat-stop-command
      - tomcat-status-command
      - tomcat-status-exptected-output
    - name: Configure Tomcat Server
      type: deploy.CreateCI
      owner: admin
      capabilities:
      - remote
      server: Deploy Server
      ciID: "Infrastructure/${host-identifier}/${server-name}"
      ciType: tomcat.Server
      jsonDescriptor: |-
        {
            "home":"${tomcat-home}",
            "startCommand":"${tomcat-start-command}",
            "stopCommand":"${tomcat-stop-command}",
            "statusCommand":"${tomcat-status-command}",
            "statusCommandExpectedOutput":"${tomcat-status-exptected-output}",
            "startWaitTime":"0",
            "stopWaitTime":"0",
            "serverStartupTime":"0",
            "serverShutdownTime":"0",
            "tomcatRunningPort":""
        }
      addToEnvironment: true
      envID: "Environments/${environment-name}"
    - name: Check Tomcat Status
      type: deploy.ControlTask
      capabilities:
      - remote
      server: Deploy Server
      ciId: "Infrastructure/${host-identifier}/${server-name}"
      taskName: status
      numberOfContinueRetrials: 0
      pollingInterval: 10
      numberOfPollingTrials: 0
      displayStepLogs: true
      connectionRetries: 10
    - name: Specify Tomcat Virtual Host Name
      type: xlrelease.UserInputTask
      description: Please enter the required information below.
      owner: admin
      variables:
      - virtual-host-name
    - name: Configure Tomcat VirtualHost
      type: deploy.CreateCI
      capabilities:
      - remote
      server: Deploy Server
      ciID: "Infrastructure/${host-identifier}/${server-name}/${virtual-host-name}"
      ciType: tomcat.VirtualHost
      jsonDescriptor: "{}"
      addToEnvironment: true
      envID: "Environments/${environment-name}"
  - phase: Setup Application
    tasks:
    - name: Specify Application Name
      type: xlrelease.UserInputTask
      description: Please enter the required information below.
      owner: admin
      variables:
      - application-name
    - name: Setup Application
      type: deploy.CreateCI
      owner: admin
      capabilities:
      - remote
      server: Deploy Server
      ciID: "Applications/${application-name}"
      ciType: udm.Application
      jsonDescriptor: "{}"
    - name: Specify Package Name
      type: xlrelease.UserInputTask
      description: Please enter the required information below.
      owner: admin
      variables:
      - package-name
    - name: Create Deployment Package
      type: deploy.CreateCI
      owner: admin
      capabilities:
      - remote
      server: Deploy Server
      ciID: "Applications/${application-name}/1.0"
      ciType: udm.DeploymentPackage
      jsonDescriptor: "{}"
    - name: Specify Tomcat Datasource
      type: xlrelease.UserInputTask
      description: Please enter the required information below.
      owner: admin
      variables:
      - datasource-name
      - jndi-name
      - datasource-context
      - database-driver-class-name
      - database url
      - db-username
      - db-password
    - name: Create Sample Tomcat DataSourceSpec
      type: deploy.CreateCI
      owner: admin
      capabilities:
      - remote
      server: Deploy Server
      ciID: "Applications/${application-name}/${package-name}/${datasource-name}"
      ciType: tomcat.DataSourceSpec
      jsonDescriptor: |-
        {
            "context":"${datasource-context}",
            "jndiName":"${jndi-name}",
            "driverClassName":"${database-driver-class-name}",
            "url":"${database url}",
            "username":"${db-username}",
            "password":"${db-password}"
        }
    color: '#3d6c9e'
  tags:
  - app-pipeline-templates
  variables:
  - type: xlrelease.StringVariable
    key: environment-name
    value: tomcat-env
  - type: xlrelease.StringVariable
    key: host-identifier
    value: tomcat-host
  - type: xlrelease.StringVariable
    key: address
    value: 1.2.3.4
  - type: xlrelease.StringVariable
    key: os
    value: UNIX
  - type: xlrelease.StringVariable
    key: port
    value: "22"
  - type: xlrelease.StringVariable
    key: ssh-privatekey
    value: private-key-path
  - type: xlrelease.StringVariable
    key: ssh-username
    value: ssh-username
  - type: xlrelease.StringVariable
    key: sudo-username
    value: sudo-username
  - type: xlrelease.StringVariable
    key: application-name
    value: tomcat-app
  - type: xlrelease.StringVariable
    key: package-name
    value: "1.0"
  - type: xlrelease.StringVariable
    key: tomcat-home
    value: tomcat-home
  - type: xlrelease.StringVariable
    key: tomcat-start-command
    value: systemctl start tomcat
  - type: xlrelease.StringVariable
    key: tomcat-status-command
    value: systemctl status tomcat
  - type: xlrelease.StringVariable
    key: tomcat-status-exptected-output
    value: active (running)
  - type: xlrelease.StringVariable
    key: tomcat-stop-command
    value: systemctl stop tomcat
  - type: xlrelease.StringVariable
    key: database url
    value: database url
  - type: xlrelease.StringVariable
    key: database-driver-class-name
    value: database-driver-class-name
  - type: xlrelease.StringVariable
    key: datasource-context
    value: datasource-context
  - type: xlrelease.StringVariable
    key: db-password
    value: db-password
  - type: xlrelease.StringVariable
    key: db-username
    value: db-username
  - type: xlrelease.StringVariable
    key: jndi-name
    value: jndi-name
  - type: xlrelease.StringVariable
    key: server-name
    value: tomcat-server
  - type: xlrelease.StringVariable
    key: virtual-host-name
    value: virtual-host
  - type: xlrelease.StringVariable
    key: datasource-name
    value: sample-datasource
  riskProfile: Default risk profile
- template: Websphere JaasAlias setup with Digital.ai Deploy
  description: "Easily create an application in Digital.ai Deploy that can be used\
    \ to create a JaasAlias in a remote Websphere Server, including its respective\
    \ environment and infrastructure setup."
  scheduledStartDate: 2023-02-14T03:30:00Z
  dueDate: 2023-02-14T04:30:00Z
  phases:
  - phase: Setup Infra and Env
    tasks:
    - name: Create Environment
      type: deploy.CreateCI
      owner: admin
      capabilities:
      - remote
      server: Deploy Server
      ciID: "Environments/${environment-name}"
      ciType: udm.Environment
      jsonDescriptor: "{}"
    - name: Specify WAS Host Parameters
      type: xlrelease.UserInputTask
      description: Please enter the required information below.
      owner: admin
      variables:
      - sudo-username
      - os
      - connection-type
      - address
      - ssh-username
      - ssh-password
    - name: Configure Remote Host
      type: deploy.CreateCI
      owner: admin
      capabilities:
      - remote
      server: Deploy Server
      ciID: "Infrastructure/${host-identifier}"
      ciType: overthere.SshHost
      jsonDescriptor: |-
        {
            "stagingDirectoryPath":"",
            "sudoUsername":"${sudo-username}",
            "suUsername":"",
            "suPassword":"",
            "os":"${os}",
            "connectionType":"${connection-type}",
            "address":"${address}",
            "port":22,
            "username":"${ssh-username}",
            "password":"${ssh-password}",
            "privateKeyFile":"",
            "passphrase":""
        }
    - name: Check Remote Host Connection
      type: deploy.ControlTask
      owner: admin
      capabilities:
      - remote
      server: Deploy Server
      ciId: "Infrastructure/${host-identifier}"
      taskName: checkConnection
      numberOfContinueRetrials: 0
      pollingInterval: 10
      numberOfPollingTrials: 0
      displayStepLogs: true
      connectionRetries: 10
    - name: Specify WAS Deployment Manager Parameters
      type: xlrelease.UserInputTask
      description: Please enter the required information below.
      owner: admin
      variables:
      - was-home
      - was-username
      - was-password
    - name: Configure Websphere Deployment Manager
      type: deploy.CreateCI
      owner: admin
      capabilities:
      - remote
      server: Deploy Server
      ciID: "Infrastructure/${host-identifier}/${cell-name}"
      ciType: was.DeploymentManager
      jsonDescriptor: |-
        {
            "wasHome": "${was-home}",
            "username": "${was-username}",
            "password": "${was-password}",
            "version": "WAS_90"
        }
      addToEnvironment: true
      envID: "Environments/${environment-name}"
    - name: Configure Websphere Node Agent
      type: deploy.CreateCI
      capabilities:
      - remote
      ciID: "Infrastructure/${host-identifier}/${cell-name}/${node-name}"
      ciType: was.NodeAgent
      jsonDescriptor: "{}"
      addToEnvironment: true
      envID: "Environments/${environment-name}"
    - name: Configure Websphere Server
      type: deploy.CreateCI
      capabilities:
      - remote
      ciID: "Infrastructure/${host-identifier}/${cell-name}/${node-name}/${server-name}"
      ciType: was.ManagedServer
      jsonDescriptor: "{}"
      addToEnvironment: true
      envID: "Environments/${environment-name}"
    color: '#3d6c9e'
  - phase: Setup Application
    tasks:
    - name: Create Application
      type: deploy.CreateCI
      owner: admin
      capabilities:
      - remote
      server: Deploy Server
      ciID: "Applications/${application-name}"
      ciType: udm.Application
      jsonDescriptor: "{}"
    - name: Create Deployment Package
      type: deploy.CreateCI
      owner: admin
      capabilities:
      - remote
      server: Deploy Server
      ciID: "Applications/${application-name}/${package-name}"
      ciType: udm.DeploymentPackage
      jsonDescriptor: "{}"
    - name: Specify WAS JaasAliasSpec Parameters
      type: xlrelease.UserInputTask
      description: Please enter the required information below.
      owner: admin
      variables:
      - jaas-password
      - jaas-username
    - name: Create Sample WAS JaasAliasSpec
      type: deploy.CreateCI
      owner: admin
      capabilities:
      - remote
      server: Deploy Server
      ciID: "Applications/${application-name}/${package-name}/sample-jaasalias"
      ciType: was.JaasAliasSpec
      jsonDescriptor: |-
        {
        "username": "${jaas-username}",
        "password": "${jaas-password}"
        }
    color: '#3d6c9e'
  tags:
  - app-pipeline-templates
  variables:
  - type: xlrelease.StringVariable
    key: environment-name
    value: was-env
  - type: xlrelease.StringVariable
    key: host-identifier
    value: was-host
  - type: xlrelease.StringVariable
    key: os
    value: UNIX
  - type: xlrelease.StringVariable
    key: address
    value: 1.2.3.4
  - type: xlrelease.StringVariable
    key: connection-type
    value: SUDO
  - type: xlrelease.StringVariable
    key: ssh-username
    value: ssh-username
  - type: xlrelease.StringVariable
    key: ssh-password
    value: ssh-password
  - type: xlrelease.StringVariable
    key: sudo-username
    value: sudo-username
  - type: xlrelease.StringVariable
    key: application-name
    value: was-application
  - type: xlrelease.StringVariable
    key: package-name
    value: "1.0"
  - type: xlrelease.StringVariable
    key: cell-name
    value: was-cell-1
  - type: xlrelease.StringVariable
    key: was-home
    value: /opt/IBM/WebSphere/AppServer-1/profiles/Dmgr01
  - type: xlrelease.StringVariable
    key: was-password
    value: admin
  - type: xlrelease.StringVariable
    key: was-username
    value: admin
  - type: xlrelease.StringVariable
    key: was-version
    value: WAS_90
  - type: xlrelease.StringVariable
    key: node-name
    value: was-node-1
  - type: xlrelease.StringVariable
    key: server-name
    value: was-server-1
  - type: xlrelease.StringVariable
    key: jaas-password
    value: admin
  - type: xlrelease.StringVariable
    key: jaas-username
    value: admin
  riskProfile: Default risk profile
